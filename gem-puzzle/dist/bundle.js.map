{"version":3,"sources":["webpack://gem-puzzle/./node_modules/@babel/runtime/helpers/arrayLikeToArray.js","webpack://gem-puzzle/./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack://gem-puzzle/./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack://gem-puzzle/./node_modules/@babel/runtime/helpers/classPrivateFieldGet.js","webpack://gem-puzzle/./node_modules/@babel/runtime/helpers/classPrivateFieldSet.js","webpack://gem-puzzle/./node_modules/@babel/runtime/helpers/createClass.js","webpack://gem-puzzle/./node_modules/@babel/runtime/helpers/defineProperty.js","webpack://gem-puzzle/./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack://gem-puzzle/./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack://gem-puzzle/./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack://gem-puzzle/./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","webpack://gem-puzzle/webpack/bootstrap","webpack://gem-puzzle/webpack/runtime/compat get default export","webpack://gem-puzzle/webpack/runtime/define property getters","webpack://gem-puzzle/webpack/runtime/hasOwnProperty shorthand","webpack://gem-puzzle/./src/components/Header/Header.js","webpack://gem-puzzle/./src/components/Puzzle/Store/Store.js","webpack://gem-puzzle/./src/components/Puzzle/Board/Board.js","webpack://gem-puzzle/./src/components/Puzzle/Menu/Menu.js","webpack://gem-puzzle/./src/components/Puzzle/TopButtonsGroup/TopButtonsGroup.js","webpack://gem-puzzle/./src/components/Puzzle/BottomButtonsGroup/BottomButtonsGroup.js","webpack://gem-puzzle/./src/components/Puzzle/Puzzle.js","webpack://gem-puzzle/./src/app.js"],"names":["module","exports","arr","len","length","i","arr2","Array","arrayLikeToArray","isArray","instance","Constructor","TypeError","receiver","privateMap","descriptor","get","call","value","set","writable","_defineProperties","target","props","enumerable","configurable","Object","defineProperty","key","protoProps","staticProps","prototype","obj","iter","Symbol","iterator","from","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","o","minLen","n","toString","slice","constructor","name","test","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","getter","__esModule","d","a","definition","prop","hasOwnProperty","Header","header","document","createElement","classList","add","container","headerInner","headerText","textContent","append","body","Store","this","push","id","number","class","chipIndex","emptyIndex","boardSize","viewMode","image","isSound","isGameEnd","time","moves","historyItem","pop","date","Date","currentScore","getFullYear","getMonth","getDate","sort","b","localStorage","setItem","JSON","stringify","parse","getItem","3","4","5","6","7","8","bufferId","every","chip","minutes","Math","floor","seconds","stringMinutes","stringSeconds","range","start","end","keys","map","Board","boardStyles","boardGap","clientWidth","bodyWidth","boardWidth","boardGapsWidth","boardClearWidth","chipFontSize","style","gridTemplateColumns","gap","fontSize","window","addEventListener","config","innerHTML","forEach","chipConfig","newChip","backgroundImage","Error","chipStyle","backgroundSize","chipId","backgroundPosition","getImagePosition","replaceChips","animationReplaceChips","onclick","event","className","ondragstart","dataTransfer","setData","setTimeout","ondragend","remove","ondragover","preventDefault","ondrop","getData","empty","basic","basicReverse","left","top","times","replaceConfigValues","pushHistory","random","stringTime","winBlock","ceil","row","position","Audio","play","possibleIndexes","includes","setAttribute","findIndex","Menu","selectListener","viewModeListener","soundListener","records","resultListener","menuInner","selectBoardSize","imageButton","soundButton","autoResult","table","fillScoreTable","boardRecords","record","index","tr","dateTd","movesTd","dateTh","movesTh","caption","thead","tableHead","toggle","disabled","btn","option","selectedIndex","removeAttribute","TopButtonsGroup","timeListener","getStringTime","settingsListener","buttonsGroup","buttonsGroupInner","settingsButton","infoPanel","updateMovesBlock","timeBlock","setInterval","movesBlock","BottomButtonsGroup","newGameListener","newGameButton","Puzzle","loadGame","getConfig","createConfig","saveGame","getBoardSize","bind","getViewMode","getSound","getRecords","getMoves","mixConfig","create","setBoardStyles","setBoardListeners","getIsGameEnd","store","fill","fillChips","getImage","setChipsStyles","checkGameEnd","setIsGameEnd","setRecord","gameEnd","setMoves","chipAnimation","setTime","getTime","saveTime","clearHistory","max","imageUrls","randomIndex","setImage","setBoardSize","setViewMode","setSound","getHistoryLength","getHistoryLastItem"],"mappings":"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","file":"bundle.js","sourcesContent":["function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = privateMap.get(receiver);\n\n  if (!descriptor) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n\n  return descriptor.value;\n}\n\nmodule.exports = _classPrivateFieldGet;","function _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = privateMap.get(receiver);\n\n  if (!descriptor) {\n    throw new TypeError(\"attempted to set private field on non-instance\");\n  }\n\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n\n    descriptor.value = value;\n  }\n\n  return value;\n}\n\nmodule.exports = _classPrivateFieldSet;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => module['default'] :\n\t\t() => module;\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","import './Header.scss';\r\n\r\nexport default class Header {\r\n    static create() {\r\n        const header = document.createElement('section');\r\n        header.classList.add('puzzle__header');\r\n\r\n        const container = document.createElement('div');\r\n        container.classList.add('container');\r\n\r\n        const headerInner = document.createElement('div');\r\n        headerInner.classList.add('puzzle__header__inner');\r\n\r\n        const headerText = document.createElement('h1');\r\n        headerText.classList.add('puzzle__header__text');\r\n        headerText.textContent = 'Gem Puzzle';\r\n\r\n        headerInner.append(headerText);\r\n        container.append(headerInner);\r\n        header.append(container);\r\n        document.body.append(header);\r\n    }\r\n}\r\n","export default class Store {\r\n    #boardSize = null;\r\n    #config = [];\r\n    #viewMode = null;\r\n    #image = null;\r\n    #isSound = null;\r\n    #isGameEnd = false;\r\n    #time = 0;\r\n    #moves = 0;\r\n    #records = null;\r\n    #history = null;\r\n\r\n    createConfig() {\r\n        this.#config = [];\r\n\r\n        for (let i = 0; i < this.#boardSize ** 2; i++) {\r\n            this.#config.push({\r\n                id: i,\r\n                number: i + 1,\r\n                class: i === this.#boardSize ** 2 - 1 ? 'empty' : 'chip'\r\n            });\r\n        }\r\n    }\r\n\r\n    getConfig() {\r\n        return this.#config;\r\n    }\r\n\r\n    replaceConfigValues(chipIndex, emptyIndex) {\r\n        [this.#config[emptyIndex], this.#config[chipIndex]] = [\r\n            this.#config[chipIndex],\r\n            this.#config[emptyIndex]\r\n        ];\r\n    }\r\n\r\n    setBoardSize(boardSize) {\r\n        this.#boardSize = boardSize;\r\n    }\r\n\r\n    getBoardSize() {\r\n        return this.#boardSize;\r\n    }\r\n\r\n    setViewMode(viewMode) {\r\n        this.#viewMode = viewMode;\r\n    }\r\n\r\n    getViewMode() {\r\n        return this.#viewMode;\r\n    }\r\n\r\n    setImage(image) {\r\n        this.#image = image;\r\n    }\r\n\r\n    getImage() {\r\n        return this.#image;\r\n    }\r\n\r\n    setSound(isSound) {\r\n        this.#isSound = isSound;\r\n    }\r\n\r\n    getSound() {\r\n        return this.#isSound;\r\n    }\r\n\r\n    setIsGameEnd(isGameEnd) {\r\n        this.#isGameEnd = isGameEnd;\r\n    }\r\n\r\n    getIsGameEnd() {\r\n        return this.#isGameEnd;\r\n    }\r\n\r\n    setTime(time) {\r\n        this.#time = time;\r\n    }\r\n\r\n    getTime() {\r\n        return this.#time;\r\n    }\r\n\r\n    setMoves(moves) {\r\n        this.#moves = moves;\r\n    }\r\n\r\n    getMoves() {\r\n        return this.#moves;\r\n    }\r\n\r\n    pushHistory(historyItem) {\r\n        this.#history.push(historyItem);\r\n    }\r\n\r\n    clearHistory() {\r\n        this.#history.length = 0;\r\n    }\r\n\r\n    getHistoryLastItem() {\r\n        return this.#history.pop();\r\n    }\r\n\r\n    getHistoryLength() {\r\n        return this.#history.length;\r\n    }\r\n\r\n    setRecord() {\r\n        const date = new Date();\r\n\r\n        const currentScore = {\r\n            date: `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`,\r\n            moves: this.#moves\r\n        };\r\n\r\n        this.#records[this.#boardSize].push(currentScore);\r\n        this.#records[this.#boardSize].sort((a, b) => a.moves - b.moves);\r\n\r\n        if (this.#records[this.#boardSize].length > 10) {\r\n            this.#records[this.#boardSize].length = 10;\r\n        }\r\n    }\r\n\r\n    getRecords() {\r\n        return this.#records;\r\n    }\r\n\r\n    saveGame() {\r\n        localStorage.setItem('boardSize', JSON.stringify(this.#boardSize));\r\n        localStorage.setItem('config', JSON.stringify(this.#config));\r\n        localStorage.setItem('viewMode', JSON.stringify(this.#viewMode));\r\n        localStorage.setItem('image', JSON.stringify(this.#image));\r\n        localStorage.setItem('isSound', JSON.stringify(this.#isSound));\r\n        localStorage.setItem('time', JSON.stringify(this.#time));\r\n        localStorage.setItem('moves', JSON.stringify(this.#moves));\r\n        localStorage.setItem('records', JSON.stringify(this.#records));\r\n        localStorage.setItem('history', JSON.stringify(this.#history));\r\n    }\r\n\r\n    loadGame() {\r\n        const defaultRecords = {\r\n            3: [],\r\n            4: [],\r\n            5: [],\r\n            6: [],\r\n            7: [],\r\n            8: []\r\n        };\r\n\r\n        this.#boardSize = JSON.parse(localStorage.getItem('boardSize')) ?? 4;\r\n        this.#config = JSON.parse(localStorage.getItem('config'));\r\n        this.#viewMode = JSON.parse(localStorage.getItem('viewMode')) ?? 'number';\r\n        this.#image = JSON.parse(localStorage.getItem('image')) ?? '1.jpg';\r\n        this.#isSound = JSON.parse(localStorage.getItem('isSound')) ?? true;\r\n        this.#time = JSON.parse(localStorage.getItem('time')) ?? 0;\r\n        this.#moves = JSON.parse(localStorage.getItem('moves')) ?? 0;\r\n        this.#records = JSON.parse(localStorage.getItem('records')) ?? defaultRecords;\r\n        this.#history = JSON.parse(localStorage.getItem('history')) ?? [];\r\n    }\r\n\r\n    saveTime() {\r\n        localStorage.setItem('time', JSON.stringify(this.#time));\r\n    }\r\n\r\n    checkGameEnd() {\r\n        let bufferId = -1;\r\n\r\n        return this.#config.every((chip) => {\r\n            if (bufferId > chip.id) return false;\r\n            bufferId = chip.id;\r\n            return true;\r\n        });\r\n    }\r\n\r\n    getStringTime() {\r\n        const minutes = Math.floor(this.#time / 60);\r\n        const seconds = this.#time % 60;\r\n\r\n        const stringMinutes = minutes < 10 ? `0${minutes}` : minutes;\r\n        const stringSeconds = seconds < 10 ? `0${seconds}` : seconds;\r\n\r\n        return `${stringMinutes}:${stringSeconds}`;\r\n    }\r\n}\r\n","import './Board.scss';\r\n\r\nconst BODY_PADDING = 20;\r\nconst MIN_WIDTH = 500;\r\n\r\nconst range = (start, end) => [...Array(end - start + 1).keys()].map((i) => i + start);\r\n\r\nexport default class Board {\r\n    #board = document.createElement('div');\r\n    #boardInner = document.createElement('div');\r\n    #chips = [];\r\n\r\n    create() {\r\n        const container = document.createElement('div');\r\n\r\n        this.#board.classList.add('board');\r\n        container.classList.add('container');\r\n        this.#boardInner.classList.add('board__inner');\r\n\r\n        container.append(this.#boardInner);\r\n        this.#board.append(container);\r\n        document.body.append(this.#board);\r\n    }\r\n\r\n    setBoardStyles(boardSize) {\r\n        const boardStyles = () => {\r\n            const boardGap = document.body.clientWidth > MIN_WIDTH ? '5px' : '0.89vw';\r\n\r\n            const bodyWidth = document.body.clientWidth;\r\n            const boardWidth = `${bodyWidth > MIN_WIDTH ? 480 : bodyWidth - BODY_PADDING}px`;\r\n            const boardGapsWidth = `${boardGap} * ${boardSize - 1}`;\r\n            const boardClearWidth = `(${boardWidth} - ${boardGapsWidth})`;\r\n            const chipFontSize = `calc(${boardClearWidth} / ${boardSize} / 2.5)`;\r\n\r\n            this.#boardInner.style.gridTemplateColumns = `repeat(${boardSize}, 1fr)`;\r\n            this.#boardInner.style.gap = boardGap;\r\n            this.#boardInner.style.fontSize = chipFontSize;\r\n        };\r\n\r\n        boardStyles();\r\n        window.addEventListener('resize', boardStyles);\r\n    }\r\n\r\n    fill(config) {\r\n        this.#boardInner.innerHTML = '';\r\n        this.#chips = [];\r\n\r\n        config.forEach((chipConfig) => {\r\n            const chip = Board.#createChip(chipConfig);\r\n            this.#chips.push(chip);\r\n        });\r\n\r\n        this.#chips.forEach((chip) => {\r\n            this.#boardInner.append(chip);\r\n        });\r\n    }\r\n\r\n    static #createChip(chipConfig) {\r\n        const chip = document.createElement('div');\r\n        chip.classList.add(chipConfig.class);\r\n\r\n        if (chipConfig.class !== 'empty') {\r\n            chip.setAttribute('draggable', 'true');\r\n        }\r\n\r\n        return chip;\r\n    }\r\n\r\n    fillChips(config, viewMode, image) {\r\n        this.#chips = this.#chips.map((chip, chipIndex) => {\r\n            const newChip = chip;\r\n\r\n            if (config[chipIndex].class !== 'empty') {\r\n                switch (viewMode) {\r\n                    case 'number':\r\n                        newChip.textContent = config[chipIndex].number;\r\n                        newChip.style.backgroundImage = '';\r\n                        break;\r\n                    case 'image':\r\n                        newChip.textContent = '';\r\n                        newChip.style.backgroundImage = `url(${image})`;\r\n                        break;\r\n                    default:\r\n                        throw new Error('Unsupported ViewMode');\r\n                }\r\n            }\r\n\r\n            return newChip;\r\n        });\r\n    }\r\n\r\n    setChipsStyles(config, boardSize) {\r\n        const chipStyle = () => {\r\n            this.#chips = this.#chips.map((chip, chipIndex) => {\r\n                const newChip = chip;\r\n\r\n                const bodyWidth = document.body.clientWidth;\r\n                newChip.style.backgroundSize = `${bodyWidth > 500 ? 480 : bodyWidth - 20}px`;\r\n\r\n                const chipId = config[chipIndex].id;\r\n                newChip.style.backgroundPosition = Board.getImagePosition(chipId, boardSize);\r\n\r\n                return newChip;\r\n            });\r\n        };\r\n\r\n        chipStyle();\r\n        window.addEventListener('resize', chipStyle);\r\n    }\r\n\r\n    static getImagePosition(id, boardSize) {\r\n        const ceil = Math.floor(id % boardSize);\r\n        const row = Math.floor(id / boardSize);\r\n        const position = 100 / (boardSize - 1);\r\n        return `${ceil * position}% ${row * position}%`;\r\n    }\r\n\r\n    setBoardListeners(config, boardSize, replaceChips, animationReplaceChips, isGameEnd) {\r\n        if (isGameEnd) return;\r\n\r\n        this.#boardInner.onclick = (event) => {\r\n            if (event.target.className === 'chip') {\r\n                const chipIndex = this.#getChipIndex(event.target);\r\n                const emptyIndex = this.#getEmptyIndex(config);\r\n\r\n                if (this.#isConfigValueReplaced(boardSize, chipIndex, emptyIndex)) {\r\n                    animationReplaceChips(chipIndex, emptyIndex);\r\n                }\r\n            }\r\n        };\r\n\r\n        this.#boardInner.ondragstart = (event) => {\r\n            const chipIndex = this.#getChipIndex(event.target);\r\n            event.dataTransfer.setData('text/plain', JSON.stringify(chipIndex));\r\n\r\n            setTimeout(() => {\r\n                event.target.classList.add('hide');\r\n            }, 0);\r\n        };\r\n\r\n        this.#boardInner.ondragend = (event) => {\r\n            event.target.classList.remove('hide');\r\n        };\r\n\r\n        this.#boardInner.ondragover = (event) => {\r\n            event.preventDefault();\r\n        };\r\n\r\n        this.#boardInner.ondrop = (event) => {\r\n            event.preventDefault();\r\n\r\n            if (event.target.className !== 'empty') return;\r\n\r\n            const chipIndex = JSON.parse(event.dataTransfer.getData('text/plain'));\r\n            const emptyIndex = this.#getEmptyIndex(config);\r\n\r\n            if (this.#isConfigValueReplaced(boardSize, chipIndex, emptyIndex)) {\r\n                replaceChips(chipIndex, emptyIndex);\r\n            }\r\n        };\r\n    }\r\n\r\n    chipAnimation(boardSize, chipIndex, emptyIndex) {\r\n        const chip = this.#chips[chipIndex];\r\n        const empty = this.#chips[emptyIndex];\r\n\r\n        const gap = document.body.clientWidth > 550 ? '5px' : '0.89vw';\r\n        const basic = `calc(100% + ${gap})`;\r\n        const basicReverse = `calc(-100% - ${gap})`;\r\n\r\n        switch (chipIndex) {\r\n            case emptyIndex - 1:\r\n                chip.style.left = basic;\r\n                empty.style.left = basicReverse;\r\n                break;\r\n            case emptyIndex + 1:\r\n                chip.style.left = basicReverse;\r\n                empty.style.left = basic;\r\n                break;\r\n            case emptyIndex - boardSize:\r\n                chip.style.top = basic;\r\n                empty.style.top = basicReverse;\r\n                break;\r\n            case emptyIndex + boardSize:\r\n                chip.style.top = basicReverse;\r\n                empty.style.top = basic;\r\n                break;\r\n            default:\r\n                throw new Error('Unsupported chipIndex');\r\n        }\r\n\r\n        this.#chips[chipIndex] = chip;\r\n        this.#chips[emptyIndex] = empty;\r\n    }\r\n\r\n    #getEmptyIndex(config) {\r\n        return config.findIndex((chipConfig) => chipConfig.class === 'empty');\r\n    }\r\n\r\n    #getChipIndex(target) {\r\n        return this.#chips.findIndex((chip) => chip === target);\r\n    }\r\n\r\n    #isConfigValueReplaced(boardSize, chipIndex, emptyIndex) {\r\n        const possibleIndexes = Board.#getConfigPossibleIndexes(boardSize, emptyIndex);\r\n        return possibleIndexes.includes(chipIndex);\r\n    }\r\n\r\n    static #getConfigPossibleIndexes(boardSize, emptyIndex) {\r\n        const possibleIndexes = [];\r\n\r\n        if (emptyIndex % boardSize !== 0) {\r\n            possibleIndexes.push(emptyIndex - 1);\r\n        }\r\n\r\n        if (emptyIndex % boardSize !== boardSize - 1) {\r\n            possibleIndexes.push(emptyIndex + 1);\r\n        }\r\n\r\n        if (!range(0, boardSize - 1).includes(emptyIndex)) {\r\n            possibleIndexes.push(emptyIndex - boardSize);\r\n        }\r\n\r\n        if (!range(boardSize ** 2 - boardSize, boardSize ** 2 - 1).includes(emptyIndex)) {\r\n            possibleIndexes.push(emptyIndex + boardSize);\r\n        }\r\n\r\n        return possibleIndexes;\r\n    }\r\n\r\n    mixConfig(boardSize, config, times, replaceConfigValues, pushHistory) {\r\n        for (let i = 0; i < times; i++) {\r\n            const emptyIndex = this.#getEmptyIndex(config);\r\n            const possibleIndexes = Board.#getConfigPossibleIndexes(boardSize, emptyIndex);\r\n            const chipIndex = possibleIndexes.sort(() => Math.random() - 0.5)[0];\r\n            replaceConfigValues(chipIndex, emptyIndex);\r\n            pushHistory({ chipIndex, emptyIndex });\r\n        }\r\n    }\r\n\r\n    gameEnd(stringTime, moves) {\r\n        const winBlock = document.createElement('div');\r\n        winBlock.classList.add('winBlock');\r\n        winBlock.textContent = `Ура! Вы решили головоломку за ${stringTime} и ${moves} ходов`;\r\n        this.#boardInner.append(winBlock);\r\n    }\r\n\r\n    static playSound(isSound) {\r\n        if (isSound) {\r\n            const sound = new Audio('keyAudio.mp3');\r\n            sound.play();\r\n        }\r\n    }\r\n}\r\n","import './Menu.scss';\r\n\r\nexport default class Menu {\r\n    static #menu = null;\r\n    static #scoreTableBody = null;\r\n    static autoResult = null;\r\n\r\n    static viewMenu() {\r\n        this.#menu.classList.remove('hide');\r\n    }\r\n\r\n    static create(\r\n        boardSize,\r\n        selectListener,\r\n        viewMode,\r\n        viewModeListener,\r\n        isSound,\r\n        soundListener,\r\n        records,\r\n        resultListener\r\n    ) {\r\n        Menu.#menu = document.createElement('div');\r\n        Menu.#menu.classList.add('menu', 'hide');\r\n\r\n        const container = document.createElement('div');\r\n        container.classList.add('container');\r\n\r\n        Menu.#menu.addEventListener('click', (event) => {\r\n            if (Menu.#menu === event.target || container === event.target) {\r\n                Menu.#menu.classList.add('hide');\r\n            }\r\n        });\r\n\r\n        const menuInner = document.createElement('div');\r\n        menuInner.classList.add('menu__inner');\r\n\r\n        const selectBoardSize = Menu.#getSelectBoardSize(boardSize, selectListener);\r\n        const imageButton = Menu.#getImageButton(viewMode, viewModeListener);\r\n        const soundButton = Menu.#getSoundButton(isSound, soundListener);\r\n        const autoResult = Menu.#getAutoResult(boardSize, resultListener);\r\n\r\n        const table = Menu.#getScoreTable();\r\n        Menu.fillScoreTable(boardSize, records);\r\n\r\n        menuInner.append(selectBoardSize);\r\n        menuInner.append(imageButton);\r\n        menuInner.append(soundButton);\r\n        menuInner.append(autoResult);\r\n        menuInner.append(table);\r\n\r\n        container.append(menuInner);\r\n        Menu.#menu.append(container);\r\n        document.body.append(Menu.#menu);\r\n    }\r\n\r\n    static #getSelectBoardSize(boardSize, selectListener) {\r\n        const selectValues = ['3x3', '4x4', '5x5', '6x6', '7x7', '8x8'];\r\n        const selectBoardSize = document.createElement('select');\r\n        selectBoardSize.classList.add('select-css');\r\n\r\n        selectValues.forEach((value, index) => {\r\n            const option = document.createElement('option');\r\n            option.textContent = value;\r\n            if (index + 3 === boardSize) option.setAttribute('selected', '');\r\n            selectBoardSize.append(option);\r\n        });\r\n\r\n        selectBoardSize.addEventListener('change', () => {\r\n            selectListener(selectBoardSize.selectedIndex + 3);\r\n            Menu.autoResult.removeAttribute('disabled');\r\n        });\r\n\r\n        return selectBoardSize;\r\n    }\r\n\r\n    static #createButton(textContent, disabled) {\r\n        const btn = document.createElement('button');\r\n        btn.classList.add('btn');\r\n        if (disabled) btn.classList.add('disabled');\r\n        btn.textContent = textContent;\r\n        return btn;\r\n    }\r\n\r\n    static #getImageButton(viewMode, viewModeListener) {\r\n        const imageButton = Menu.#createButton('Image', viewMode === 'number');\r\n\r\n        imageButton.addEventListener('click', () => {\r\n            viewModeListener();\r\n            imageButton.classList.toggle('disabled');\r\n        });\r\n\r\n        return imageButton;\r\n    }\r\n\r\n    static #getSoundButton(isSound, soundListener) {\r\n        const soundButton = Menu.#createButton('Sound', !isSound);\r\n\r\n        soundButton.addEventListener('click', () => {\r\n            soundListener();\r\n            soundButton.classList.toggle('disabled');\r\n        });\r\n\r\n        return soundButton;\r\n    }\r\n\r\n    static #getAutoResult(boardSize, resultListener) {\r\n        Menu.autoResult = Menu.#createButton('Auto result', false);\r\n        if (boardSize !== 4) Menu.autoResult.setAttribute('disabled', 'true');\r\n\r\n        Menu.autoResult.addEventListener('click', () => {\r\n            resultListener();\r\n            Menu.autoResult.setAttribute('disabled', 'true');\r\n        });\r\n\r\n        return Menu.autoResult;\r\n    }\r\n\r\n    static #getScoreTable() {\r\n        const table = document.createElement('table');\r\n        table.classList.add('records-table');\r\n\r\n        const caption = Menu.#getCaption();\r\n        table.append(caption);\r\n\r\n        const thead = document.createElement('thead');\r\n        const tableHead = Menu.#getTableHead();\r\n        thead.append(tableHead);\r\n        table.append(thead);\r\n\r\n        Menu.#scoreTableBody = document.createElement('tbody');\r\n        table.append(Menu.#scoreTableBody);\r\n\r\n        return table;\r\n    }\r\n\r\n    static #getCaption() {\r\n        const caption = document.createElement('caption');\r\n        caption.textContent = 'Best records';\r\n        return caption;\r\n    }\r\n\r\n    static #getTableHead() {\r\n        const tr = document.createElement('tr');\r\n\r\n        const position = document.createElement('th');\r\n        position.textContent = '#';\r\n\r\n        const dateTh = document.createElement('th');\r\n        dateTh.textContent = 'Date';\r\n\r\n        const movesTh = document.createElement('th');\r\n        movesTh.textContent = 'Moves';\r\n\r\n        tr.append(position);\r\n        tr.append(dateTh);\r\n        tr.append(movesTh);\r\n        return tr;\r\n    }\r\n\r\n    static fillScoreTable(boardSize, records) {\r\n        const boardRecords = records[boardSize];\r\n        Menu.#scoreTableBody.innerHTML = '';\r\n\r\n        boardRecords.forEach((record, index) => {\r\n            const tr = document.createElement('tr');\r\n\r\n            const position = document.createElement('td');\r\n            position.textContent = index + 1;\r\n\r\n            const dateTd = document.createElement('td');\r\n            dateTd.textContent = record.date;\r\n\r\n            const movesTd = document.createElement('td');\r\n            movesTd.textContent = record.moves;\r\n\r\n            tr.append(position);\r\n            tr.append(dateTd);\r\n            tr.append(movesTd);\r\n            Menu.#scoreTableBody.append(tr);\r\n        });\r\n    }\r\n}\r\n","import './TopButtonsGroup.scss';\r\n\r\nexport default class TopButtonsGroup {\r\n    static #movesBlock = null;\r\n\r\n    static create(timeListener, getStringTime, moves, settingsListener) {\r\n        const buttonsGroup = document.createElement('div');\r\n        const container = document.createElement('div');\r\n        const buttonsGroupInner = document.createElement('div');\r\n        const settingsButton = TopButtonsGroup.#getSettingsButton(settingsListener);\r\n        const infoPanel = TopButtonsGroup.#getInfoPanel(timeListener, getStringTime, moves);\r\n\r\n        buttonsGroup.classList.add('puzzle__btn-group');\r\n        container.classList.add('container');\r\n        buttonsGroupInner.classList.add('puzzle__btn-group__inner');\r\n\r\n        buttonsGroupInner.append(settingsButton);\r\n        buttonsGroupInner.append(infoPanel);\r\n        container.append(buttonsGroupInner);\r\n        buttonsGroup.append(container);\r\n        document.body.append(buttonsGroup);\r\n    }\r\n\r\n    static #getSettingsButton(settingsListener) {\r\n        const settingsButton = document.createElement('button');\r\n        settingsButton.classList.add('btn');\r\n        settingsButton.textContent = 'Settings';\r\n        settingsButton.addEventListener('click', settingsListener);\r\n        return settingsButton;\r\n    }\r\n\r\n    static #getInfoPanel(timeListener, getStringTime, moves) {\r\n        const infoPanel = document.createElement('div');\r\n        infoPanel.classList.add('info-panel');\r\n\r\n        const timeBlock = TopButtonsGroup.#getTimeBlock(timeListener, getStringTime);\r\n        const movesBlock = TopButtonsGroup.#getMovesBlock(moves);\r\n\r\n        infoPanel.append(timeBlock);\r\n        infoPanel.append(movesBlock);\r\n\r\n        return infoPanel;\r\n    }\r\n\r\n    static #getTimeBlock(timeListener, getStringTime) {\r\n        const timeBlock = document.createElement('div');\r\n        timeBlock.textContent = getStringTime();\r\n\r\n        setInterval(() => {\r\n            timeListener();\r\n            timeBlock.textContent = getStringTime();\r\n        }, 1000);\r\n\r\n        return timeBlock;\r\n    }\r\n\r\n    static #getMovesBlock(moves) {\r\n        TopButtonsGroup.#movesBlock = document.createElement('div');\r\n        TopButtonsGroup.updateMovesBlock(moves);\r\n        return TopButtonsGroup.#movesBlock;\r\n    }\r\n\r\n    static updateMovesBlock(moves) {\r\n        TopButtonsGroup.#movesBlock.textContent = moves;\r\n    }\r\n}\r\n","import './BottomButtonsGroup.scss';\r\n\r\nexport default class BottomButtonsGroup {\r\n    static create(newGameListener) {\r\n        const buttonsGroup = document.createElement('div');\r\n        const container = document.createElement('div');\r\n        const buttonsGroupInner = document.createElement('div');\r\n        const newGameButton = BottomButtonsGroup.#getNewGameButton(newGameListener);\r\n\r\n        buttonsGroup.classList.add('puzzle__btn-group');\r\n        container.classList.add('container');\r\n        buttonsGroupInner.classList.add('puzzle__btn-group__inner');\r\n\r\n        buttonsGroupInner.append(newGameButton);\r\n        container.append(buttonsGroupInner);\r\n        buttonsGroup.append(container);\r\n        document.body.append(buttonsGroup);\r\n    }\r\n\r\n    static #getNewGameButton(newGameListener) {\r\n        const newGameButton = document.createElement('button');\r\n        newGameButton.classList.add('btn', 'btn-large');\r\n        newGameButton.textContent = 'New game';\r\n        newGameButton.addEventListener('click', newGameListener);\r\n        return newGameButton;\r\n    }\r\n}\r\n","import Store from './Store/Store';\r\nimport Board from './Board/Board';\r\nimport Menu from './Menu/Menu';\r\nimport TopButtonsGroup from './TopButtonsGroup/TopButtonsGroup';\r\nimport BottomButtonsGroup from './BottomButtonsGroup/BottomButtonsGroup';\r\n\r\nconst getRandomInt = (max) => Math.floor(Math.random() * Math.floor(max));\r\n\r\nclass Puzzle {\r\n    #store = new Store();\r\n    #board = new Board();\r\n\r\n    create() {\r\n        this.#store.loadGame();\r\n\r\n        if (this.#store.getConfig() === null) {\r\n            this.#store.createConfig();\r\n            this.#mixConfig();\r\n            this.#store.saveGame();\r\n        }\r\n\r\n        Menu.create(\r\n            this.#store.getBoardSize(),\r\n            this.#selectListener.bind(this),\r\n            this.#store.getViewMode(),\r\n            this.#viewModeListener.bind(this),\r\n            this.#store.getSound(),\r\n            this.#soundListener.bind(this),\r\n            this.#store.getRecords(),\r\n            this.#resultListener.bind(this)\r\n        );\r\n\r\n        TopButtonsGroup.create(\r\n            this.#timeListener.bind(this),\r\n            this.#store.getStringTime.bind(this.#store),\r\n            this.#store.getMoves(),\r\n            this.#settingsListener.bind(this)\r\n        );\r\n\r\n        this.#createBoard();\r\n        BottomButtonsGroup.create(this.#newGameListener.bind(this));\r\n    }\r\n\r\n    #mixConfig() {\r\n        this.#board.mixConfig(\r\n            this.#store.getBoardSize(),\r\n            this.#store.getConfig(),\r\n            2000,\r\n            this.#store.replaceConfigValues.bind(this.#store),\r\n            this.#store.pushHistory.bind(this.#store)\r\n        );\r\n    }\r\n\r\n    #createBoard() {\r\n        this.#board.create();\r\n        this.#board.setBoardStyles(this.#store.getBoardSize());\r\n        this.#fillBoard();\r\n\r\n        this.#board.setBoardListeners(\r\n            this.#store.getConfig(),\r\n            this.#store.getBoardSize(),\r\n            this.#replaceChips.bind(this),\r\n            this.#animationReplaceChips.bind(this),\r\n            this.#store.getIsGameEnd()\r\n        );\r\n    }\r\n\r\n    #fillBoard() {\r\n        const store = this.#store;\r\n\r\n        this.#board.fill(store.getConfig());\r\n        this.#board.fillChips(store.getConfig(), store.getViewMode(), store.getImage());\r\n        this.#board.setChipsStyles(store.getConfig(), store.getBoardSize());\r\n\r\n        if (this.#store.checkGameEnd()) {\r\n            this.#store.setIsGameEnd(true);\r\n            this.#store.setRecord();\r\n            this.#store.saveGame();\r\n            Menu.fillScoreTable(this.#store.getBoardSize(), this.#store.getRecords());\r\n            this.#board.gameEnd(this.#store.getStringTime(), this.#store.getMoves());\r\n        }\r\n    }\r\n\r\n    #replaceChips(chipIndex, emptyIndex) {\r\n        this.#store.replaceConfigValues(chipIndex, emptyIndex);\r\n        this.#fillBoard();\r\n\r\n        this.#store.setMoves(this.#store.getMoves() + 1);\r\n        TopButtonsGroup.updateMovesBlock(this.#store.getMoves());\r\n\r\n        this.#store.pushHistory({ chipIndex, emptyIndex });\r\n\r\n        Board.playSound(this.#store.getSound());\r\n        this.#store.saveGame();\r\n    }\r\n\r\n    #animationReplaceChips(chipIndex, emptyIndex) {\r\n        this.#store.replaceConfigValues(chipIndex, emptyIndex);\r\n        this.#board.chipAnimation(this.#store.getBoardSize(), chipIndex, emptyIndex);\r\n        setTimeout(this.#fillBoard.bind(this), 120);\r\n\r\n        this.#store.setMoves(this.#store.getMoves() + 1);\r\n        TopButtonsGroup.updateMovesBlock(this.#store.getMoves());\r\n\r\n        this.#store.pushHistory({ chipIndex, emptyIndex });\r\n\r\n        Board.playSound(this.#store.getSound());\r\n        this.#store.saveGame();\r\n    }\r\n\r\n    #timeListener() {\r\n        if (this.#store.getIsGameEnd()) return;\r\n        this.#store.setTime(this.#store.getTime() + 1);\r\n        this.#store.saveTime();\r\n    }\r\n\r\n    #newGameListener() {\r\n        this.#store.clearHistory();\r\n        this.#store.createConfig();\r\n        this.#mixConfig();\r\n\r\n        this.#store.setIsGameEnd(false);\r\n        this.#store.setTime(0);\r\n        this.#store.setMoves(0);\r\n        TopButtonsGroup.updateMovesBlock(0);\r\n        this.#setImage();\r\n        this.#store.saveGame();\r\n\r\n        this.#board.setBoardStyles(this.#store.getBoardSize());\r\n        this.#fillBoard();\r\n\r\n        this.#board.setBoardListeners(\r\n            this.#store.getConfig(),\r\n            this.#store.getBoardSize(),\r\n            this.#replaceChips.bind(this),\r\n            this.#animationReplaceChips.bind(this),\r\n            this.#store.getIsGameEnd()\r\n        );\r\n\r\n        Menu.autoResult.removeAttribute('disabled');\r\n    }\r\n\r\n    #setImage() {\r\n        const imageUrls = ['1.jpg', '2.jpg', '3.jpg', '4.jpg'];\r\n        const randomIndex = getRandomInt(imageUrls.length);\r\n        this.#store.setImage(imageUrls[randomIndex]);\r\n    }\r\n\r\n    #settingsListener() {\r\n        Menu.viewMenu();\r\n    }\r\n\r\n    #selectListener(boardSize) {\r\n        this.#store.setBoardSize(boardSize);\r\n        this.#newGameListener();\r\n        Menu.fillScoreTable(this.#store.getBoardSize(), this.#store.getRecords());\r\n    }\r\n\r\n    #viewModeListener() {\r\n        this.#store.setViewMode(this.#store.getViewMode() === 'number' ? 'image' : 'number');\r\n        this.#board.fillChips(\r\n            this.#store.getConfig(),\r\n            this.#store.getViewMode(),\r\n            this.#store.getImage()\r\n        );\r\n        this.#store.saveGame();\r\n    }\r\n\r\n    #soundListener() {\r\n        this.#store.setSound(!this.#store.getSound());\r\n        this.#store.saveGame();\r\n    }\r\n\r\n    #resultListener() {\r\n        for (let i = 0; i < this.#store.getHistoryLength(); i++) {\r\n            setTimeout(() => {\r\n                const { chipIndex, emptyIndex } = this.#store.getHistoryLastItem();\r\n\r\n                this.#store.replaceConfigValues(chipIndex, emptyIndex);\r\n                this.#board.chipAnimation(this.#store.getBoardSize(), chipIndex, emptyIndex);\r\n                setTimeout(this.#fillBoard.bind(this), 120);\r\n\r\n                this.#store.setMoves(this.#store.getMoves() + 1);\r\n                TopButtonsGroup.updateMovesBlock(this.#store.getMoves());\r\n\r\n                Board.playSound(this.#store.getSound());\r\n                this.#store.saveGame();\r\n            }, 120 * i * 2);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Puzzle;\r\n","import 'normalize.css';\r\nimport './assets/styles/app.scss';\r\n\r\nimport Header from './components/Header/Header';\r\nimport Puzzle from './components/Puzzle/Puzzle';\r\n\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n    Header.create();\r\n\r\n    const puzzle = new Puzzle();\r\n    puzzle.create();\r\n});\r\n"],"sourceRoot":""}